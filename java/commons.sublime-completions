{
   "scope": "source.java",

   "completions":
   [
      /**beanutils**/
      { "trigger": "commons.beanutils.cloneBean 克隆bean", "contents": "Object ${1:localVal} = BeanUtils.cloneBean(${2:Object bean}) ;" },
      { "trigger": "commons.beanutils.copyProperties 复制同名属性", "contents": "BeanUtils.copyProperties(${2:Object dest},${3: Object orig}) ;" },
      { "trigger": "commons.beanutils.copyProperty 复制指定属性", "contents": "BeanUtils.copyProperty(${2:Object bean},${3: String name},${4: Object value}) ;" },
      { "trigger": "commons.beanutils.describe", "contents": "java.util.Map ${1:localVal} = BeanUtils.describe(${2:Object bean}) ;" },
      { "trigger": "commons.beanutils.getArrayProperty", "contents": "String[] ${1:localVal} = BeanUtils.getArrayProperty(${2:Object bean},${3: String name}) ;" },
      { "trigger": "commons.beanutils.getIndexedProperty", "contents": "String ${1:localVal} = BeanUtils.getIndexedProperty(${2:Object bean},${3: String name}${4:[,int index]}) ;" },
      { "trigger": "commons.beanutils.getMappedProperty", "contents": "String ${1:localVal} = BeanUtils.getMappedProperty(${2:Object bean},${3: String name}${4:[,String key]}) ;" },
      { "trigger": "commons.beanutils.getNestedProperty 获取嵌套属性", "contents": "String ${1:localVal} = BeanUtils.getNestedProperty(${2:Object bean},${3: String name}) ;" },
      { "trigger": "commons.beanutils.getProperty", "contents": "String ${1:localVal} = BeanUtils.getProperty(${2:Object bean},${3: String name}) ;" },
      { "trigger": "commons.beanutils.getSimpleProperty", "contents": "String ${1:localVal} = BeanUtils.getSimpleProperty(${2:Object bean},${3: String name}) ;" },
      { "trigger": "commons.beanutils.populate", "contents": "BeanUtils.populate(${2:Object bean},${3: Map properties}) ;" },
      { "trigger": "commons.beanutils.setProperty", "contents": "BeanUtils.setProperty(${2:Object bean},${3: String name},${4: Object value}) ;" },

/**PropertyUtils**/
      { "trigger": "commons.PropertyUtils.clearDescriptors", "contents": "PropertyUtils.clearDescriptors() ;" },
      { "trigger": "commons.PropertyUtils.copyProperties", "contents": "PropertyUtils.copyProperties(${2:Object dest},${ 3: Object orig}) ;" },
      { "trigger": "commons.PropertyUtils.describe属性集", "contents": "java.util.Map ${1:localVal} = PropertyUtils.describe(${2:Object bean}) ;" },


      { "trigger": "commons.PropertyUtils.get数组属性", "contents": "Object ${1:localVal} = PropertyUtils.getIndexedProperty(${2:Object bean},${3: String name}${4:[,int index]}) ;" },

      { "trigger": "commons.PropertyUtils.getMap属性", "contents": "Object ${1:localVal} = PropertyUtils.getMappedProperty(${2:Object bean},${3: String name}${4:[, String key]}) ;" },
      
      { "trigger": "commons.PropertyUtils.get嵌套属性", "contents": "Object ${1:localVal} = PropertyUtils.getNestedProperty(${2:Object bean},${ 3: String name}) ;" },
      { "trigger": "commons.PropertyUtils.getProperty", "contents": "Object ${1:localVal} = PropertyUtils.getProperty(${2:Object bean},${ 3: String name}) ;" },
      { "trigger": "commons.PropertyUtils.getPropertyDescriptor 属性描述", "contents": "PropertyDescriptor ${1:localVal} = PropertyUtils.getPropertyDescriptor(${2:Object bean},${ 3: String name}) ;" },
      { "trigger": "commons.PropertyUtils.getPropertyDescriptors属性描述class", "contents": "PropertyDescriptor[] ${1:localVal} = PropertyUtils.getPropertyDescriptors(${2:Class beanClass}) ;" },
      { "trigger": "commons.PropertyUtils.getPropertyDescriptors属性描述bean", "contents": "PropertyDescriptor[] ${1:localVal} = PropertyUtils.getPropertyDescriptors(${2:Object bean}) ;" },
      { "trigger": "commons.PropertyUtils.getPropertyEditorClass", "contents": "Class ${1:localVal} = PropertyUtils.getPropertyEditorClass(${2:Object bean},${ 3: String name}) ;" },
      { "trigger": "commons.PropertyUtils.getPropertyType", "contents": "Class ${1:localVal} = PropertyUtils.getPropertyType(${2:Object bean},${ 3: String name}) ;" },
      { "trigger": "commons.PropertyUtils.getReadMethod", "contents": "reflect.Method ${1:localVal} = PropertyUtils.getReadMethod(${2:PropertyDescriptor descriptor}) ;" },
      { "trigger": "commons.PropertyUtils.getSimpleProperty", "contents": "Object ${1:localVal} = PropertyUtils.getSimpleProperty(${2:Object bean},${ 3: String name}) ;" },
      { "trigger": "commons.PropertyUtils.getWriteMethod", "contents": "reflect.Method ${1:localVal} = PropertyUtils.getWriteMethod(${2:PropertyDescriptor descriptor}) ;" },
      { "trigger": "commons.PropertyUtils.isReadable", "contents": "boolean ${1:localVal} = PropertyUtils.isReadable(${2:Object bean},${ 3: String name}) ;" },
      { "trigger": "commons.PropertyUtils.isWriteable", "contents": "boolean ${1:localVal} = PropertyUtils.isWriteable(${2:Object bean},${ 3: String name}) ;" },
      { "trigger": "commons.PropertyUtils.setDebug", "contents": "PropertyUtils.setDebug(${2:int newDebug}) ;" },
      { "trigger": "commons.PropertyUtils.setIndexedProperty", "contents": "PropertyUtils.setIndexedProperty(${2:Object bean},${3: String name}${5:[,int index]},${4: Object value}) ;" },


      { "trigger": "commons.PropertyUtils.setMappedProperty", "contents": "PropertyUtils.setMappedProperty(${2:Object bean},${3: String name}${5:, String key},${4: Object value}) ;" },
      { "trigger": "commons.PropertyUtils.setNestedProperty", "contents": "PropertyUtils.setNestedProperty(${2:Object bean},${3: String name},${4: Object value}) ;" },
      { "trigger": "commons.PropertyUtils.setProperty", "contents": "PropertyUtils.setProperty(${2:Object bean},${3: String name},${4: Object value}) ;" },
      { "trigger": "commons.PropertyUtils.setSimpleProperty", "contents": "PropertyUtils.setSimpleProperty(${2:Object bean},${3: String name},${4: Object value}) ;" },


      /**ConvertUtils**/
      { "trigger": "commons.ConvertUtils.convert", "contents": "String ${1:localVal} = ConvertUtils.convert(${2:Object | String[] |String  value}${3:[, Class clazz]}) ;//" },
      { "trigger": "commons.ConvertUtils.deregister", "contents": "ConvertUtils.deregister(${2:[Class clazz]}) ;//如果不提供参数则注销全部转换器" },
      { "trigger": "commons.ConvertUtils.lookup", "contents": "Converter ${1:localVal} = ConvertUtils.lookup((${2:[Class clazz]}) ;//获取某个类型的转换器" },
      { "trigger": "commons.ConvertUtils.register", "contents": "ConvertUtils.register((${2:[Class clazz]}) ;//注册类型转换器" },



      /**StringUtils**/

      { "trigger": "commons.StringUtils.abbreviate ", "contents": "String ${1:localVal} = StringUtils.abbreviate (${2: String str}${3:[, int offset]},${4: int maxWidth });//使用椭圆缩写字符串。" },
      { "trigger": "commons.StringUtils.abbreviateMiddle ", "contents": "String ${1:localVal} = StringUtils.abbreviateMiddle (${2: String str},${3: String middle},${4: int length });//将String缩写为传递的长度，用提供的替换字符串替换中间字符。" },
      { "trigger": "commons.StringUtils.capitalize ", "contents": "String ${1:localVal} = StringUtils.capitalize (${2: String str });//按照Character.toTitleCase(char)将大写字符串改变第一个字母到标题大小写。" },


      { "trigger": "commons.StringUtils.center 字符串插入", "contents": "String ${1:localVal} = StringUtils.center (${2: String str},${3: int size}${4: ,[String | char padStr ]});//将一个字符串放在一个较大的大小字符串中。" },

      { "trigger": "commons.StringUtils.chomp ", "contents": "String ${1:localVal} = StringUtils.chomp (${2: String str}${3: [,String separator ]});//如果存在，请从str的末尾删除separator ，否则将其单独删除。" },
      { "trigger": "commons.StringUtils.chop ", "contents": "String ${1:localVal} = StringUtils.chop (${2: String str });//从字符串中删除最后一个字符。" },

      { "trigger": "commons.StringUtils.contains ", "contents": "boolean ${1:localVal} = StringUtils.contains (${2: String str},${3: String |char searchStr });//检查String是否包含搜索字符串，处理null 。" },

      { "trigger": "commons.StringUtils.containsAny ", "contents": "boolean ${1:localVal} = StringUtils.containsAny (${2: String str},${3: String | char[] searchChars });//检查字符串是否包含给定字符集中的任何字符。" },
      { "trigger": "commons.StringUtils.containsIgnoreCase ", "contents": "boolean ${1:localVal} = StringUtils.containsIgnoreCase (${2: String str},${3: String searchStr });//检查String是否包含搜索字符串，不管大小写，处理null 。" },

      { "trigger": "commons.StringUtils.containsNone ", "contents": "boolean ${1:localVal} = StringUtils.containsNone (${2: String str},${3: String |char[] invalidChars });//检查字符串不包含某些字符。" },

      { "trigger": "commons.StringUtils.containsOnly ", "contents": "boolean ${1:localVal} = StringUtils.containsOnly (${2: String str},${3: String |char[] validChars });//检查字符串是否只包含某些字符。" },
      { "trigger": "commons.StringUtils.countMatches ", "contents": "int ${1:localVal} = StringUtils.countMatches (${2: String str},${3: String sub });//计算子字符串出现在较大字符串中的次数。" },
      { "trigger": "commons.StringUtils.defaultIfEmpty ", "contents": "String ${1:localVal} = StringUtils.defaultIfEmpty (${2: String str},${3: String defaultStr });//返回传入的String，或者如果String为空或为null ， defaultStr的值。" },

      { "trigger": "commons.StringUtils.defaultString ", "contents": "String ${1:localVal} = StringUtils.defaultString (${2: String str},${3: [,String defaultStr ]});//返回传入的String，或者如果String为null ， defaultStr的值。" },
      { "trigger": "commons.StringUtils.deleteWhitespace ", "contents": "String ${1:localVal} = StringUtils.deleteWhitespace (${2: String str });//从Character.isWhitespace(char)定义的字符串中删除所有的空格。" },
      { "trigger": "commons.StringUtils.difference ", "contents": "String ${1:localVal} = StringUtils.difference (${2: String str1},${3: String str2 });//比较两个字符串，并返回它们不同的部分。" },
      { "trigger": "commons.StringUtils.endsWith ", "contents": "boolean ${1:localVal} = StringUtils.endsWith (${2: String str},${3: String suffix });//检查String是否以指定的后缀结尾。" },
      { "trigger": "commons.StringUtils.endsWithIgnoreCase ", "contents": "boolean ${1:localVal} = StringUtils.endsWithIgnoreCase (${2: String str},${3: String suffix });//不区分大小写检查字符串是否以指定的后缀结尾。" },
      { "trigger": "commons.StringUtils.equals ", "contents": "boolean ${1:localVal} = StringUtils.equals (${2: String str1},${3: String str2 });//比较两个字符串，如果相等则true 。" },
      { "trigger": "commons.StringUtils.equalsIgnoreCase ", "contents": "boolean ${1:localVal} = StringUtils.equalsIgnoreCase (${2: String str1},${3: String str2 });//比较两个字符串，如果忽略这种情况，则true 。" },
      { "trigger": "commons.StringUtils.getCommonPrefix ", "contents": "String ${1:localVal} = StringUtils.getCommonPrefix (${2: String [] strs });//比较数组中的所有字符串，并返回所有字符串的初始序列。" },
      { "trigger": "commons.StringUtils.getLevenshteinDistance ", "contents": "int ${1:localVal} = StringUtils.getLevenshteinDistance (${2: String s},${3: String t });//找到两个弦之间的Levenshtein距离。" },



      { "trigger": "commons.StringUtils.indexOf ", "contents": "int ${1:localVal} = StringUtils.indexOf (${2: String str},${3: String |char searchStr}${4: [,int startPos ]});//查找String中的第一个索引，处理null 。" },

      { "trigger": "commons.StringUtils.indexOfAny ", "contents": "int ${1:localVal} = StringUtils.indexOfAny (${2: String str},${3: char[]|String|String [] searchChars });//搜索字符串以查找给定字符集中任何字符的第一个索引。" },


      { "trigger": "commons.StringUtils.indexOfAnyBut ", "contents": "int ${1:localVal} = StringUtils.indexOfAnyBut (${2: String str},${3: String |char[] searchChars });//搜索字符串以找到不在给定字符集中的任何字符的第一个索引。" },
      { "trigger": "commons.StringUtils.indexOf不同-数组", "contents": "int ${1:localVal} = StringUtils.indexOfDifference (${2: String [] strs });//比较数组中的所有字符串，并返回字符串开始不同的索引。" },
      { "trigger": "commons.StringUtils.indexOf不同-两个", "contents": "int ${1:localVal} = StringUtils.indexOfDifference (${2: String str1},${3: String str2 });//比较两个字符串，并返回字符串开始不同的索引。" },

      { "trigger": "commons.StringUtils.indexOfIgnoreCase ", "contents": "int ${1:localVal} = StringUtils.indexOfIgnoreCase (${2: String str},${3: String searchStr}${4: [,int startPos ]});//从指定位置的字符串中的第一个索引的案例敏感查找。" },
      { "trigger": "commons.StringUtils.isAllLowerCase ", "contents": "boolean ${1:localVal} = StringUtils.isAllLowerCase (${2: String str });//检查字符串是否只包含小写字符。" },
      { "trigger": "commons.StringUtils.isAllUpperCase ", "contents": "boolean ${1:localVal} = StringUtils.isAllUpperCase (${2: String str });//检查字符串是否只包含大写字符。" },
      { "trigger": "commons.StringUtils.isAlpha ", "contents": "boolean ${1:localVal} = StringUtils.isAlpha (${2: String str });//检查String是否只包含unicode字母。" },
      { "trigger": "commons.StringUtils.isAlphanumeric ", "contents": "boolean ${1:localVal} = StringUtils.isAlphanumeric (${2: String str });//检查字符串是否只包含Unicode字符或数字。" },
      { "trigger": "commons.StringUtils.isAlphanumericSpace ", "contents": "boolean ${1:localVal} = StringUtils.isAlphanumericSpace (${2: String str });//检查字符串是否只包含Unicode字符，数字或空格（ ' ' ）。" },
      { "trigger": "commons.StringUtils.isAlphaSpace ", "contents": "boolean ${1:localVal} = StringUtils.isAlphaSpace (${2: String str });//检查String是否只包含Unicode字符和空格（''）。" },
      { "trigger": "commons.StringUtils.isAsciiPrintable ", "contents": "boolean ${1:localVal} = StringUtils.isAsciiPrintable (${2: String str });//检查字符串是否只包含ASCII可打印字符。" },
      { "trigger": "commons.StringUtils.isBlank ", "contents": "boolean ${1:localVal} = StringUtils.isBlank (${2: String str });//检查String是否为空格，为空（“”）或为空。" },
      { "trigger": "commons.StringUtils.isEmpty ", "contents": "boolean ${1:localVal} = StringUtils.isEmpty (${2: String str });//检查String是否为空（“”）或为空。" },
      { "trigger": "commons.StringUtils.isNotBlank ", "contents": "boolean ${1:localVal} = StringUtils.isNotBlank (${2: String str });//检查字符串是否不为空（“”），不为null而不是空格。" },
      { "trigger": "commons.StringUtils.isNotEmpty ", "contents": "boolean ${1:localVal} = StringUtils.isNotEmpty (${2: String str });//检查字符串是否不为空（“”）而不是空。" },
      { "trigger": "commons.StringUtils.isNumeric ", "contents": "boolean ${1:localVal} = StringUtils.isNumeric (${2: String str });//检查String是否只包含unicode数字。" },
      { "trigger": "commons.StringUtils.isNumericSpace ", "contents": "boolean ${1:localVal} = StringUtils.isNumericSpace (${2: String str });//检查字符串是否只包含unicode数字或空格（ ' ' ）。" },
      { "trigger": "commons.StringUtils.isWhitespace ", "contents": "boolean ${1:localVal} = StringUtils.isWhitespace (${2: String str });//检查String是否只包含空格。" },
      { "trigger": "commons.StringUtils.join ", "contents": "String ${1:localVal} = StringUtils.join (${2: Collection collection},${3: char separator });//将提供的Collection的元素连接到包含提供的元素的单个字符串中。" },
      { "trigger": "commons.StringUtils.join ", "contents": "String ${1:localVal} = StringUtils.join (${2: Collection collection},${3: String separator });//将提供的Collection的元素连接到包含提供的元素的单个字符串中。" },
      { "trigger": "commons.StringUtils.join ", "contents": "String ${1:localVal} = StringUtils.join (${2: Iterator iterator},${3: char separator });//将提供的Iterator的元素连接到包含提供的元素的单个String中。" },
      { "trigger": "commons.StringUtils.join ", "contents": "String ${1:localVal} = StringUtils.join (${2: Iterator iterator},${3: String separator });//将提供的Iterator的元素连接到包含提供的元素的单个String中。" },
      { "trigger": "commons.StringUtils.join ", "contents": "String ${1:localVal} = StringUtils.join (${2: Object [] array });//将提供的数组的元素连接到包含提供的元素列表的单个String中。" },
      { "trigger": "commons.StringUtils.join ", "contents": "String ${1:localVal} = StringUtils.join (${2: Object [] array},${3: char separator });//将提供的数组的元素连接到包含提供的元素列表的单个String中。" },
      { "trigger": "commons.StringUtils.join ", "contents": "String ${1:localVal} = StringUtils.join (${2: Object [] array},${3: char separator},${4: int startIndex},${5: int endIndex });//将提供的数组的元素连接到包含提供的元素列表的单个String中。" },
      { "trigger": "commons.StringUtils.join ", "contents": "String ${1:localVal} = StringUtils.join (${2: Object [] array},${3: String separator });//将提供的数组的元素连接到包含提供的元素列表的单个String中。" },
      { "trigger": "commons.StringUtils.join ", "contents": "String ${1:localVal} = StringUtils.join (${2: Object [] array},${3: String separator},${4: int startIndex},${5: int endIndex });//将提供的数组的元素连接到包含提供的元素列表的单个String中。" },
      { "trigger": "commons.StringUtils.lastIndexOf ", "contents": "int ${1:localVal} = StringUtils.lastIndexOf (${2: String str},${3: char searchChar });//查找String中的最后一个索引，处理null 。" },
      { "trigger": "commons.StringUtils.lastIndexOf ", "contents": "int ${1:localVal} = StringUtils.lastIndexOf (${2: String str},${3: char searchChar},${4: int startPos });//从起始位置查找String中的最后一个索引，处理null 。" },
      { "trigger": "commons.StringUtils.lastIndexOf ", "contents": "int ${1:localVal} = StringUtils.lastIndexOf (${2: String str},${3: String searchStr });//查找String中的最后一个索引，处理null 。" },
      { "trigger": "commons.StringUtils.lastIndexOf ", "contents": "int ${1:localVal} = StringUtils.lastIndexOf (${2: String str},${3: String searchStr},${4: int startPos });//查找String中的第一个索引，处理null 。" },
      { "trigger": "commons.StringUtils.lastIndexOfAny ", "contents": "int ${1:localVal} = StringUtils.lastIndexOfAny (${2: String str},${3: String [] searchStrs });//查找一组潜在子字符串中的任何一个的最新索引。" },
      { "trigger": "commons.StringUtils.lastIndexOfIgnoreCase ", "contents": "int ${1:localVal} = StringUtils.lastIndexOfIgnoreCase (${2: String str},${3: String searchStr });//案例敏感查找字符串中最后一个索引。" },
      { "trigger": "commons.StringUtils.lastIndexOfIgnoreCase ", "contents": "int ${1:localVal} = StringUtils.lastIndexOfIgnoreCase (${2: String str},${3: String searchStr},${4: int startPos});//案例敏感查找字符串中最后一个索引从指定位置。" },
      { "trigger": "commons.StringUtils.lastOrdinalIndexOf ", "contents": "int ${1:localVal} = StringUtils.lastOrdinalIndexOf (${2: String str},${3: String searchStr},${4: int ordinal });//查找String中的第n个最后一个索引，处理null 。" },
      { "trigger": "commons.StringUtils.left ", "contents": "String ${1:localVal} = StringUtils.left (${2: String str},${3: int len });//获取一个String的最左边的len个字符。" },
      { "trigger": "commons.StringUtils.leftPad ", "contents": "String ${1:localVal} = StringUtils.leftPad (${2: String str},${3: int size });//左边填充一个带空格（''）的字符串。" },
      { "trigger": "commons.StringUtils.leftPad ", "contents": "String ${1:localVal} = StringUtils.leftPad (${2: String str},${3: int size},${4: char padChar });//左键填上一个指定字符的字符串。" },
      { "trigger": "commons.StringUtils.leftPad ", "contents": "String ${1:localVal} = StringUtils.leftPad (${2: String str},${3: int size},${4: String padStr });//左键单击指定字符串的字符串。" },
      { "trigger": "commons.StringUtils.length ", "contents": "int ${1:localVal} = StringUtils.length (${2: String str });//获取字符串的长度，如果String为null 。" },
      { "trigger": "commons.StringUtils.lowerCase ", "contents": "String ${1:localVal} = StringUtils.lowerCase (${2: String str });//按照String.toLowerCase()将字符串转换为小写。" },
      { "trigger": "commons.StringUtils.lowerCase ", "contents": "String ${1:localVal} = StringUtils.lowerCase (${2: String str},${3: Locale locale });//按照String.toLowerCase(Locale)将字符串转换为小写。" },
      { "trigger": "commons.StringUtils.mid ", "contents": "String ${1:localVal} = StringUtils.mid (${2: String str},${3: int pos},${4: int len });//从String的中间获取len个字符。" },
      { "trigger": "commons.StringUtils.ordinalIndexOf ", "contents": "int ${1:localVal} = StringUtils.ordinalIndexOf (${2: String str},${3: String searchStr},${4: int ordinal });//查找String中的第n个索引，处理null 。" },
      { "trigger": "commons.StringUtils.overlay ", "contents": "String ${1:localVal} = StringUtils.overlay (${2: String str},${3: String overlay},${4: int start},${5: int end });//用另一个字符串覆盖字符串的一部分。" },
      { "trigger": "commons.StringUtils.remove ", "contents": "String ${1:localVal} = StringUtils.remove (${2: String str},${3: char remove });//从源字符串中删除所有出现的字符。" },
      { "trigger": "commons.StringUtils.remove ", "contents": "String ${1:localVal} = StringUtils.remove (${2: String str},${3: String remove });//从源字符串中删除所有出现的子字符串。" },
      { "trigger": "commons.StringUtils.removeEnd ", "contents": "String ${1:localVal} = StringUtils.removeEnd (${2: String str},${3: String remove });//只有在源字符串的末尾才能删除子字符串，否则返回源字符串。" },
      { "trigger": "commons.StringUtils.removeEndIgnoreCase ", "contents": "String ${1:localVal} = StringUtils.removeEndIgnoreCase (${2: String str},${3: String remove });//如果子字符串位于源字符串的末尾，则不区分大小写，否则返回源字符串。" },
      { "trigger": "commons.StringUtils.removeStart ", "contents": "String ${1:localVal} = StringUtils.removeStart (${2: String str},${3: String remove });//只有在源字符串的起始处，才能删除子字符串，否则返回源字符串。" },
      { "trigger": "commons.StringUtils.removeStartIgnoreCase ", "contents": "String ${1:localVal} = StringUtils.removeStartIgnoreCase (${2: String str},${3: String remove });//如果子字符串位于源字符串的起始处，则不区分大小写，否则返回源字符串。" },
      { "trigger": "commons.StringUtils.repeat ", "contents": "String ${1:localVal} = StringUtils.repeat (${2: String str},${3: int repeat });//重复String repeat次数以形成一个新的String。" },
      { "trigger": "commons.StringUtils.repeat ", "contents": "String ${1:localVal} = StringUtils.repeat (${2: String str},${3: String separator},${4: int repeat });//重复一次String repeat次数以形成一个新的String，每次都注入一个String分隔符。" },
      { "trigger": "commons.StringUtils.replace ", "contents": "String ${1:localVal} = StringUtils.replace (${2: String text},${3: String searchString},${4: String replacement });//替换另一个字符串中所有出现的字符串。" },
      { "trigger": "commons.StringUtils.replace ", "contents": "String ${1:localVal} = StringUtils.replace (${2: String text},${3: String searchString},${4: String replacement},${5: int max });//将一个String替换为一个较大的String中的另一个String，用于搜索String的第一个max 。" },
      { "trigger": "commons.StringUtils.replaceChars ", "contents": "String ${1:localVal} = StringUtils.replaceChars (${2: String str},${3: char searchChar},${4: char replaceChar });//将字符串中的一个字符的所有出现替换为另一个。" },
      { "trigger": "commons.StringUtils.replaceChars ", "contents": "String ${1:localVal} = StringUtils.replaceChars (${2: String str},${3: String searchChars},${4: String replaceChars });//一次性替换字符串中的多个字符。" },
      { "trigger": "commons.StringUtils.replaceEach ", "contents": "String ${1:localVal} = StringUtils.replaceEach (${2: String text},${3: String [] searchList},${4: String [] replacementList });//替换另一个字符串中所有出现的字符串。" },
      { "trigger": "commons.StringUtils.replaceEachRepeatedly ", "contents": "String ${1:localVal} = StringUtils.replaceEachRepeatedly (${2: String text},${3: String [] searchList},${4: String [] replacementList });//替换另一个字符串中所有出现的字符串。" },
      { "trigger": "commons.StringUtils.replaceOnce ", "contents": "String ${1:localVal} = StringUtils.replaceOnce (${2: String text},${3: String searchString},${4: String replacement });//将一个String替换为一个较大的String中的一个String，一次。" },
      { "trigger": "commons.StringUtils.reverse ", "contents": "String ${1:localVal} = StringUtils.reverse (${2: String str });//根据StringBuffer.reverse()反转字符串。" },
      { "trigger": "commons.StringUtils.reverseDelimited ", "contents": "String ${1:localVal} = StringUtils.reverseDelimited (${2: String str},${3: char separatorChar });//反转由特定字符分隔的字符串。" },
      { "trigger": "commons.StringUtils.right ", "contents": "String ${1:localVal} = StringUtils.right (${2: String str},${3: int len });//获取字符串的最右边的len字符。" },
      { "trigger": "commons.StringUtils.rightPad ", "contents": "String ${1:localVal} = StringUtils.rightPad (${2: String str},${3: int size });//右键单击带空格（''）的字符串。" },
      { "trigger": "commons.StringUtils.rightPad ", "contents": "String ${1:localVal} = StringUtils.rightPad (${2: String str},${3: int size},${4: char padChar });//右键填上一个指定字符的字符串。" },
      { "trigger": "commons.StringUtils.rightPad ", "contents": "String ${1:localVal} = StringUtils.rightPad (${2: String str},${3: int size},${4: String padStr });//右键指定一个指定字符串的字符串。" },
      { "trigger": "commons.StringUtils.split ", "contents": "String [] ${1:localVal} = StringUtils.split (${2: String str });//将提供的文本拆分为数组，使用空格作为分隔符。" },
      { "trigger": "commons.StringUtils.split ", "contents": "String [] ${1:localVal} = StringUtils.split (${2: String str},${3: char separatorChar });//将提供的文本拆分为数组，指定分隔符。" },
      { "trigger": "commons.StringUtils.split ", "contents": "String [] ${1:localVal} = StringUtils.split (${2: String str},${3: String separatorChars });//将提供的文本拆分为数组，指定分隔符。" },
      { "trigger": "commons.StringUtils.split ", "contents": "String [] ${1:localVal} = StringUtils.split (${2: String str},${3: String separatorChars},${4: int max });//将提供的文本分割为最大长度的数组，指定分隔符。" },
      { "trigger": "commons.StringUtils.splitByCharacterType ", "contents": "String [] ${1:localVal} = StringUtils.splitByCharacterType (${2: String str });//按java.lang.Character.getType(char)返回的java.lang.Character.getType(char)类型拆分字符串。" },
      { "trigger": "commons.StringUtils.splitByCharacterTypeCamelCase ", "contents": "String [] ${1:localVal} = StringUtils.splitByCharacterTypeCamelCase (${2: String str });//按java.lang.Character.getType(char)返回的java.lang.Character.getType(char)类型拆分字符串。" },
      { "trigger": "commons.StringUtils.splitByWholeSeparator ", "contents": "String [] ${1:localVal} = StringUtils.splitByWholeSeparator (${2: String str},${3: String separator });//将提供的文本拆分为数组，指定分隔符。" },
      { "trigger": "commons.StringUtils.splitByWholeSeparator ", "contents": "String [] ${1:localVal} = StringUtils.splitByWholeSeparator (${2: String str},${3: String separator},${4: int max });//将提供的文本拆分为数组，指定分隔符。" },
      { "trigger": "commons.StringUtils.splitByWholeSeparatorPreserveAllTokens ", "contents": "String [] ${1:localVal} = StringUtils.splitByWholeSeparatorPreserveAllTokens (${2: String str},${3: String separator });//将提供的文本拆分为数组，指定分隔符。" },
      { "trigger": "commons.StringUtils.splitByWholeSeparatorPreserveAllTokens ", "contents": "String [] ${1:localVal} = StringUtils.splitByWholeSeparatorPreserveAllTokens (${2: String str},${3: String separator},${4: int max });//将提供的文本拆分为数组，指定分隔符。" },
      { "trigger": "commons.StringUtils.splitPreserveAllTokens ", "contents": "String [] ${1:localVal} = StringUtils.splitPreserveAllTokens (${2: String str });//将提供的文本拆分为数组，使用空格作为分隔符，保留所有令牌，包括由相邻分隔符创建的空令牌。" },
      { "trigger": "commons.StringUtils.splitPreserveAllTokens ", "contents": "String [] ${1:localVal} = StringUtils.splitPreserveAllTokens (${2: String str},${3: char separatorChar });//将提供的文本拆分为数组，指定分隔符，保留所有令牌，包括由相邻分隔符创建的空令牌。" },
      { "trigger": "commons.StringUtils.splitPreserveAllTokens ", "contents": "String [] ${1:localVal} = StringUtils.splitPreserveAllTokens (${2: String str},${3: String separatorChars });//将提供的文本分解为数组，指定分隔符，保留所有令牌，包括由相邻分隔符创建的空令牌。" },
      { "trigger": "commons.StringUtils.splitPreserveAllTokens ", "contents": "String [] ${1:localVal} = StringUtils.splitPreserveAllTokens (${2: String str},${3: String separatorChars},${4: int max });//将提供的文本分割为最大长度的数组，指定分隔符，保留所有令牌，包括由相邻分隔符创建的空令牌。" },
      { "trigger": "commons.StringUtils.startsWith ", "contents": "boolean ${1:localVal} = StringUtils.startsWith (${2: String str},${3: String prefix });//检查String是否以指定的前缀开头。" },
      { "trigger": "commons.StringUtils.startsWithAny ", "contents": "boolean ${1:localVal} = StringUtils.startsWithAny (${2: String string},${3: String [] searchStrings });//检查一个String是否以任何一个指定字符串数组开头。" },
      { "trigger": "commons.StringUtils.startsWithIgnoreCase ", "contents": "boolean ${1:localVal} = StringUtils.startsWithIgnoreCase (${2: String str},${3: String prefix });//不区分大小写检查字符串是否以指定的前缀开头。" },
      { "trigger": "commons.StringUtils.strip ", "contents": "String ${1:localVal} = StringUtils.strip (${2: String str });//从字符串的开始和结束切割空格。" },
      { "trigger": "commons.StringUtils.strip ", "contents": "String ${1:localVal} = StringUtils.strip (${2: String str},${3: String stripChars });//从字符串的开始和结束处理任何一组字符。" },
      { "trigger": "commons.StringUtils.stripAll ", "contents": "String [] ${1:localVal} = StringUtils.stripAll (${2: String [] strs });//从数组中的每个字符串的开头和结尾处输入空格。" },
      { "trigger": "commons.StringUtils.stripAll ", "contents": "String [] ${1:localVal} = StringUtils.stripAll (${2: String [] strs},${3: String stripChars });//从数组中的每个字符串的开始和结束处理任何一组字符。" },
      { "trigger": "commons.StringUtils.stripEnd ", "contents": "String ${1:localVal} = StringUtils.stripEnd (${2: String str},${3: String stripChars });//从字符串的末尾取出任何一组字符。" },
      { "trigger": "commons.StringUtils.stripStart ", "contents": "String ${1:localVal} = StringUtils.stripStart (${2: String str},${3: String stripChars });//从字符串的起始处移动一组字符。" },
      { "trigger": "commons.StringUtils.stripToEmpty ", "contents": "String ${1:localVal} = StringUtils.stripToEmpty (${2: String str });//从字符串的开始和结束处输入空格， null空字符串（如果为null 。" },
      { "trigger": "commons.StringUtils.stripToNull ", "contents": "String ${1:localVal} = StringUtils.stripToNull (${2: String str });//如果字符串为空（“”），则字符串的起始和结尾将条带null 。" },
      { "trigger": "commons.StringUtils.substring ", "contents": "String ${1:localVal} = StringUtils.substring (${2: String str},${3: int start });//从指定的String获取一个子字符串避免异常。" },
      { "trigger": "commons.StringUtils.substring ", "contents": "String ${1:localVal} = StringUtils.substring (${2: String str},${3: int start},${4: int end });//从指定的String获取一个子字符串避免异常。" },
      { "trigger": "commons.StringUtils.substringAfter ", "contents": "String ${1:localVal} = StringUtils.substringAfter (${2: String str},${3: String separator });//在第一次出现分隔符之后获取子字符串。" },
      { "trigger": "commons.StringUtils.substringAfterLast ", "contents": "String ${1:localVal} = StringUtils.substringAfterLast (${2: String str},${3: String separator });//在最后一次发生分隔符之后获取子字符串。" },
      { "trigger": "commons.StringUtils.substringBefore ", "contents": "String ${1:localVal} = StringUtils.substringBefore (${2: String str},${3: String separator });//在第一次出现分隔符之前获取子串。" },
      { "trigger": "commons.StringUtils.substringBeforeLast ", "contents": "String ${1:localVal} = StringUtils.substringBeforeLast (${2: String str},${3: String separator });//在分隔符的最后一次发生之前获取子串。" },
      { "trigger": "commons.StringUtils.substringBetween ", "contents": "String ${1:localVal} = StringUtils.substringBetween (${2: String str},${3: String tag });//获取嵌套在同一个String的两个实例之间的String。" },
      { "trigger": "commons.StringUtils.substringBetween ", "contents": "String ${1:localVal} = StringUtils.substringBetween (${2: String str},${3: String open},${4: String close });//获取嵌套在两个字符串之间的字符串。" },
      { "trigger": "commons.StringUtils.substringsBetween ", "contents": "String [] ${1:localVal} = StringUtils.substringsBetween (${2: String str},${3: String open},${4: String close });//搜索由起始和结束标记分隔的子字符串的字符串，返回数组中所有匹配的子字符串。" },
      { "trigger": "commons.StringUtils.swapCase ", "contents": "String ${1:localVal} = StringUtils.swapCase (${2: String str });//将字符串的大小写更改为小写，将小写字母更改为大写字母。" },
      { "trigger": "commons.StringUtils.trim ", "contents": "String ${1:localVal} = StringUtils.trim (${2: String str });//从此字符串的两端删除控制字符（char <= 32），通过null null来处理null 。" },
      { "trigger": "commons.StringUtils.trimToEmpty ", "contents": "String ${1:localVal} = StringUtils.trimToEmpty (${2: String str });//从这个String的两端删除控制字符（char <= 32），如果字符串为空（“”），则返回一个空字符串（“”），如果它为null 。" },
      { "trigger": "commons.StringUtils.trimToNull ", "contents": "String ${1:localVal} = StringUtils.trimToNull (${2: String str });//从此字符串的两端删除控制字符（char <= 32）如果在修剪后的String为空（“”）或如果为null ，则null 。" },
      { "trigger": "commons.StringUtils.uncapitalize ", "contents": "String ${1:localVal} = StringUtils.uncapitalize (${2: String str });//Uncapitalizes一个字符串根据Character.toLowerCase(char)将第一个字母更改为标题大小写。" },
      { "trigger": "commons.StringUtils.upperCase ", "contents": "String ${1:localVal} = StringUtils.upperCase (${2: String str });//按照String.toUpperCase()将字符串转换为大写。" },
      { "trigger": "commons.StringUtils.upperCase ", "contents": "String ${1:localVal} = StringUtils.upperCase (${2: String str},${3: Locale locale });//按照String.toUpperCase(Locale)将字符串转换为大写。" },

   ]
}
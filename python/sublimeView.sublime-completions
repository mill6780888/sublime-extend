{ "trigger": "sublime-view-id", "contents": "${1:int}=view.id()" },
{ "trigger": "sublime-view-buffer_id", "contents": "${1:int}=view.buffer_id()" },
{ "trigger": "sublime-view-文件名", "contents": "${1:String}=view.file_name()" },
{ "trigger": "sublime-view-返回buffer指定的名称。", "contents": "${1:String}=view.name()" },
{ "trigger": "sublime-view-设置buffer的名称。", "contents": "${1:None}=view.set_name(name)" },
{ "trigger": "sublime-view-载入中", "contents": "${1:bool}=view.is_loading()" },
{ "trigger": "sublime-view-是否有未保存到buffer的修改。", "contents": "${1:bool}=view.is_dirty()" },
{ "trigger": "sublime-view-是否只读", "contents": "${1:bool}=view.is_read_only()" },
{ "trigger": "sublime-view-设为只读", "contents": "${1:None}=view.set_read_only(value)" },
{ "trigger": "sublime-view-是否临时缓冲区", "contents": "${1:bool}=view.is_scratch()" },
{ "trigger": "sublime-view-设置临时缓冲区。", "contents": "${1:None}=view.set_scratch(value)" },
{ "trigger": "sublime-view-返回view的settings", "contents": "${1:Settings}=view.settings()" },
{ "trigger": "sublime-view-当前view的window。", "contents": "${1:Window}=view.window()" },
{ "trigger": "sublime-view-运行TextCommand", "contents": "${1:None}=view.run_command(string, <args>)" },
{ "trigger": "sublime-view-字符总数量", "contents": "${1:int}=view.size()" },
{ "trigger": "sublime-view-返回region选区内容字符串。", "contents": "${1:String}=view.substr(region)" },
{ "trigger": "sublime-view-返回point点的右侧字符", "contents": "${1:String}=view.substr(point)" },
{ "trigger": "sublime-view-创建一个edit对象", "contents": "${1:Edit}=view.begin_edit(<command>, <args>)" },
{ "trigger": "sublime-view-标记完成一个edit对象", "contents": "${1:Edit}=view.end_edit(edit)" },
{ "trigger": "sublime-view-在缓冲区指定的点插入一个字符串。返回插入的字符数量；如果插入当前缓冲区的tabs返回有点区别。", "contents": "${1:int}=view.insert(edit, point, string)" },
{ "trigger": "sublime-view-从缓冲区移除region选区内容。", "contents": "${1:None}=view.erase(edit, region)" },
{ "trigger": "sublime-view-把region选区内容替换成指定的字符串。", "contents": "${1:None}=view.replace(edit, region, string)" },
{ "trigger": "sublime-view-返回selection(选择)的引用。", "contents": "${1:RegionSet}=view.sel()" },
{ "trigger": "sublime-view-返回point点所在的行。", "contents": "${1:Region}=view.line(point)" },
{ "trigger": "sublime-view-返回region区域行头到行尾的一份拷贝，从行头到行尾可能跨了多行（译者注：换行显示的时候，但是中间没有换行符）。", "contents": "${1:Region}=view.line(region)" },
{ "trigger": "sublime-view-同 line()，但是尾部有换行符的时候也包括了换行符。", "contents": "${1:Region}=view.full_line(point)" },
{ "trigger": "sublime-view-同 line()， 但是尾部有换行符的时候也包括了换行符", "contents": "${1:Region}=view.full_line(region)" },
{ "trigger": "sublime-view-返回region区域的所有行列表 (经过排序) 。", "contents": "${1:[Region]}=view.lines(region)" },
{ "trigger": "sublime-view-用换行符把整个region分割成多个region区域，返回region列表。", "contents": "${1:[Region]}=view.split_by_newlines(region)" },
{ "trigger": "sublime-view-返回包含point点的单词。", "contents": "${1:Region}=view.word(point)" },
{ "trigger": "sublime-view-返回包含region区域的单词区域（从第一个单词的开头，到最后一个单词的末尾）。有可能会跨多个单词。", "contents": "${1:Region}=view.word(region)" },
{ "trigger": "sublime-view-返回匹配的第一个区域，从指定的点位置开始，没有匹配结果返回None。flags参数可以是 sublime.LITERAL, sublime.IGNORECASE, 或者2个"或运算"。", "contents": "${1:Region}=view.find(pattern, fromPosition, <flags>)" },
{ "trigger": "sublime-view-返回所有(无重叠)的匹配区域结果。flags参数同上， 如果有format参数，所有匹配结果都会按指定格式被格式化并添加到extractions列表里。", "contents": "${1:[Region]}=view.find_all(pattern, <flags>, <format>, <extractions>)" },
{ "trigger": "sublime-view-计算指定点从0开始的行位置和列位置。", "contents": "${1:(int, int)}=view.rowcol(point)" },
{ "trigger": "sublime-view-计算指定行，列位置字符的偏移量。\"col\"(\"列\")是从一行的行头开始的字符数量。", "contents": "${1:int}=view.text_point(row, col)" },
{ "trigger": "sublime-view-指定语法文件。view. syntax_file文件应该是按行来定义语法名称，基于Packages/Python/Python.tmLanguage。接受当前语法可以使用view.settings().get('syntax')。", "contents": "${1:None}=view.set_syntax_file(syntax_file)" },
{ "trigger": "sublime-view-返回指定点位置字符语法名称的范围。", "contents": "${1:Region}=view.extract_scope(point)" },
{ "trigger": "sublime-view-返回指定点位置字符的语法名称。", "contents": "${1:String}=view.scope_name(point)" },
{ "trigger": "sublime-view-返回包含指定点位置的选择器(selector)的数量(score)。score为0表示没有匹配, 大于0表示一个匹配，不同的选择器可以通过scope来比较： scope值越高说明这段选区越适合这个选择器。", "contents": "${1:Int}=view.score_selector(point, selector)" },
{ "trigger": "sublime-view-返回符合指定选择器的所有区域，结果为一个列表。", "contents": "${1:[Regions]}=view.find_by_selector(selector)" },
{ "trigger": "sublime-view-滚动view到指定的点。", "contents": "${1:None}=view.show(point, <show_surrounds>)" },
{ "trigger": "sublime-view-滚动view到指定的区域。", "contents": "${1:None}=view.show(region, <show_surrounds>)" },
{ "trigger": "sublime-view-滚动view到可以显示指定的区域集。", "contents": "${1:None}=view.show(region_set, <show_surrounds>)" },
{ "trigger": "sublime-view-滚动到view的中心位置。", "contents": "${1:None}=view.show_at_center(point)" },
{ "trigger": "sublime-view-滚动view到region区域的中心位置。", "contents": "${1:None}=view.show_at_center(region)" },
{ "trigger": "sublime-view-返回当前view可看见的区域。", "contents": "${1:Region}=view.visible_region()" },
{ "trigger": "sublime-view-返回可视区域在布局坐标中的偏移量。", "contents": "${1:Vector}=view.viewport_position()" },
{ "trigger": "sublime-view-把可视区域滚动到指定位置。", "contents": "${1:None}=view.set_viewport_position(vector, <animate<)" },
{ "trigger": "sublime-view-返回可视区域宽高。", "contents": "${1:vector}=view.viewport_extent()" },
{ "trigger": "sublime-view-返回文档layout的宽高。(译者注：layout区域相当于编辑器里写的代码的范围，到代码字符的最后一行和最后一列区域，下同)", "contents": "${1:vector}=view.layout_extent()" },
{ "trigger": "sublime-view-把文本位置转换成layout位置。", "contents": "${1:vector}=view.text_to_layout(point)" },
{ "trigger": "sublime-view-layout位置转换成文本位置。", "contents": "${1:point}=view.layout_to_text(vector)" },
{ "trigger": "sublime-view-返回layout的行高。", "contents": "${1:real}=view.line_height()" },
{ "trigger": "sublime-view-范围layout的字符宽度。", "contents": "${1:real}=view.em_width()" },
{ "trigger": "sublime-view-往view里添加这一组区域(region)。", "contents": "${1:None}=view.add_regions(key, [regions], scope, <icon>, <flags>)" },
{ "trigger": "sublime-view-返回指定key的region。", "contents": "${1:[regions]}=view.get_regions(key)" },
{ "trigger": "sublime-view-移除指定key的region", "contents": "${1:None}=view.erase_regions(key)" },
{ "trigger": "sublime-view-往view里添加状态。value值会被现实在状态栏， 以key排序，每个状态值逗号分隔。value为空字符串将清空改key对应的状态值。", "contents": "${1:None}=view.set_status(key, value)" },
{ "trigger": "sublime-view-返回key对应的状态值。", "contents": "${1:String}=view.get_status(key)" },
{ "trigger": "sublime-view-清空key对一个的状态值。", "contents": "${1:None}=view.erase_status(key)" },
{ "trigger": "sublime-view-返回undo/redo栈中保存的，命令名称，参数和重复次数。", "contents": "${1:(String,Dict,int)}=view.command_history(index, <modifying_only>)" },
{ "trigger": "sublime-view-折叠指定区域，如果已经折叠返回False。", "contents": "${1:bool}=view.fold([regions])" },
{ "trigger": "sublime-view-同上。", "contents": "${1:bool}=view.fold(region)" },
{ "trigger": "sublime-view-展开对应区域的所有文本，返回展开的区域。", "contents": "${1:[regions]}=view.unfold(region)" },
{ "trigger": "sublime-view-同上。", "contents": "${1:[regions]}=view.unfold([regions])" },
{ "trigger": "sublime-view-返回当前文件编码。", "contents": "${1:String}=view.encoding()" },
{ "trigger": "sublime-view-设置文件编码，文件下一次保存时生效。", "contents": "${1:None}=view.set_encoding(encoding)" },
{ "trigger": "sublime-view-返回当前文件使用的换行符模式。（译者注：windows系统下回返回\"Windows\"）", "contents": "${1:String}=view.line_endings()" },
{ "trigger": "sublime-view-设置文件的换行符模式，下一次保存时生效。", "contents": "${1:None}=view.set_line_endings(line_endings)" },

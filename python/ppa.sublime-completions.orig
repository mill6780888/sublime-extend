{
<<<<<<< HEAD
   "scope": "source.python",
=======
   "scope": "source.py,source.python",
>>>>>>> b059b85eded68f240ffd3021db711897f9a92db4

   "completions":
   [
      { "trigger": "file-head", "contents": "#!/usr/bin/python\n# -*- coding: UTF-8 -*-\n" },
      { "trigger": "comment-more", "contents": "\"\"\"\n  ${1:这里是多行文本描述}\n\"\"\"\n" },
      { "trigger": "ifelse", "contents": "if ${1:expression} : \n   ${3:TODO} \nelif ${2:expression} :  \n   ${4:TODO}  \nelse :  \n   ${5:TODO} " },

      { "trigger": "while", "contents": "while (${1:true}):\n   ${2://TODO }" },
   
      /*数据类型转换*/
      { "trigger": "convert-int\t转成整数", "contents": "${1:var}=int(${2:x} ${3:[,base]})#   将x转换为一个整数" },
      { "trigger": "convert-long\t转长整数", "contents": "${1:var}=long(${2:x} ${3:[,base]} )#   将x转换为一个长整数" },
      { "trigger": "convert-float\t转浮点数", "contents": "${1:var}=float(${2:x})#   将x转换到一个浮点数" },
      { "trigger": "convert-complex\t转复数", "contents": "${1:var}=complex(${2:real} ${3:[,imag]})# 创建一个复数" },
      { "trigger": "convert-str\t转字符串", "contents": "${1:var}=str(${2:x})# 将对象 x 转换为字符串" },
      { "trigger": "convert-repr\t转表达式", "contents": "${1:var}=repr(${2:x})#  将对象 x 转换为表达式字符串" },
      { "trigger": "convert-eval\t计算字符串表达式", "contents": "${1:var}=eval(${2:str})#   用来计算在字符串中的有效Python表达式,并返回一个对象" },
      { "trigger": "convert-tuple\t转元祖", "contents": "${1:var}=tuple(${2:s})#   将序列 s 转换为一个元组" },
      { "trigger": "convert-list\t转列表", "contents": "${1:var}=list(${2:s})#  将序列 s 转换为一个列表" },
      { "trigger": "convert-set\t转集合", "contents": "${1:var}=set(${2:s})# 转换为可变集合" },
      { "trigger": "convert-dict\t转字典", "contents": "${1:var}=dict(${2:d})#  创建一个字典。d 必须是一个序列 (${2:key},${3:value})元组。" },
      { "trigger": "convert-frozenset\t转不可变集合", "contents": "${1:var}=frozenset(${2:s})# 转换为不可变集合" },
      { "trigger": "convert-chr\t转字符", "contents": "${1:var}=chr(${2:x})# 将一个整数转换为一个字符" },
      { "trigger": "convert-unichr-Unicode\t转字符", "contents": "${1:var}=unichr(${2:x})# 将一个整数转换为Unicode字符" },
      { "trigger": "convert-ord\t转整数", "contents": "${1:var}=ord(${2:x})# 将一个字符转换为它的整数值" },
      { "trigger": "convert-hex\t转十六进制字符串", "contents": "${1:var}=hex(${2:x})# 将一个整数转换为一个十六进制字符串" },
      { "trigger": "convert-oct\t转八进制字符串", "contents": "${1:var}=oct(${2:x})# 将一个整数转换为一个八进制字符串" },
      /**函数*/
      { "trigger": "function-call", "contents": "${1:var=}printme(${2:str = \"My string\"});" },
      /*常用语句*/
      { "trigger": "print\t打印2.7", "contents": "print\t$1" },


      /**声明一个let的多变量*/
      { "trigger": "del\t清除变量", "contents": "del ${1:要删除的变量名}" },
      { "trigger": "substring\t截取字符串", "contents": "${2:${1:b} = }${3:被截取的字符串}[${4:开始位置}:${5:结束位置}]" },
      { "trigger": "let-moret\t声明多个变量", "contents": "${1:变量一}, ${3:变量二}, ${5:变量三} = ${2:值一}, ${4:值二}, ${6:值三}" },
      { "trigger": "list\t声明列表", "contents": "${1:listname} = [${2:元素1},${3:元素2}]" },
      { "trigger": "yuanzu\t声明元祖", "contents": "${1:tuplename} = (${2:元素1},${3:元素2})" },

      /*类属性方法*/
      { "trigger": "class-getattr\t访问对象的属性。", "contents": "getattr(${1:obj, name[, default]}) " },
      { "trigger": "class-hasattr\t检查是否存在一个属性。", "contents": "hasattr(${1:obj,name}) " },
      { "trigger": "class-setattr\t设置或创建", "contents": "setattr(${1:obj,name,value}) " },
      { "trigger": "class-delattr\t删除属性。", "contents": "delattr(${1:obj, name}) " },
      { "trigger": "class-dict\t类的属性", "contents": "${1:className}.__dict__ " },
      { "trigger": "class-doc\t类的文档字符串", "contents": "${1:className}.__doc__ " },
      { "trigger": "class-name\t类名", "contents": "${1:className}.__name__" },
      { "trigger": "class-module\t所在的模块", "contents": "${1:className}.__module__" },
      { "trigger": "class-bases\t类的所有父类构成元素", "contents": "${1:className}.__bases__ " },
      { "trigger": "class-issubclass\t是否子类", "contents": "issubclass(${1:sub},${2:sup})" },
      { "trigger": "class-isinstance\t是否实例", "contents": "isinstance(${1:obj},${2:Class})" },
      { "trigger": "class-private\t访问私有属性", "contents": "object._${1:className}__${2:attrName}" },

/*sublime-api*/
     { "trigger": "sublime-sublime-延时调用", "contents": "sublime.set_timeout(${2:callback, delay})" },
   { "trigger": "sublime-sublime-设置状态栏消息.", "contents": "sublime.status_message(${2:string})" },
   { "trigger": "sublime-sublime-error对话框.", "contents": "sublime.error_message(${2:string})" },
   { "trigger": "sublime-sublime-message对话框.", "contents": "sublime.message_dialog(${2:string})" },
   { "trigger": "sublime-sublime-确认对话框", "contents": "${1:bool}=sublime.ok_cancel_dialog(${2:string, <ok_button>})" },
   { "trigger": "sublime-sublime-载入配置", "contents": "${1:Settings}=sublime.load_settings(${2:base_name})#name参数要包括文件名和后缀" },
   { "trigger": "sublime-sublime-保存配置", "contents": "sublime.save_settings(${2:base_name})" },
   { "trigger": "sublime-sublime-打开窗口列表。", "contents": "${1:[Window]}=sublime.windows()" },
   { "trigger": "sublime-sublime-最近使用的窗口。", "contents": "${1:Window}=sublime.active_window()" },
   { "trigger": "sublime-sublime-packages目录的路径.", "contents": "${1:String}=sublime.packages_path()" },
   { "trigger": "sublime-sublime-*.sublime-package文件的目录", "contents": "${1:String}=sublime.installed_packages_path()" },
   { "trigger": "sublime-sublime-返回剪贴板的内容。", "contents": "${1:String}=sublime.get_clipboard()" },
   { "trigger": "sublime-sublime-设置剪贴板的内容。", "contents": "sublime.set_clipboard(${2:string})" },
   { "trigger": "sublime-sublime-选择器设置", "contents": "${1:Int}=sublime.score_selector(${2:scope, selector})" },
   { "trigger": "sublime-sublime-运行ApplicationCommand", "contents": "sublime.run_command(${2:string, <args>})" },
   { "trigger": "sublime-sublime-启用控制命令的日志", "contents": "sublime.log_commands(${2:flag})" },
   { "trigger": "sublime-sublime-启用控制日志输出", "contents": "sublime.log_input(${2:flag})" },
   { "trigger": "sublime-sublime-版本号。", "contents": "${1:String}=sublime.version()" },
   { "trigger": "sublime-sublime-运行的平台", "contents": "${1:String}=sublime.platform()" },
   { "trigger": "sublime-sublime-CPU架构", "contents": "${1:String}=sublime.arch()" },


      { "trigger": "regexp-flags-re.I-大小写不敏感", "contents": "${1:re.I}" },
      { "trigger": "regexp-flags-re.L-本地化识别", "contents": "${1:re.L}" },
      { "trigger": "regexp-flags-re.M-多行匹配", "contents": "${1:re.M}" },
      { "trigger": "regexp-flags-re.S-.包括换行", "contents": "${1:re.S}" },
      { "trigger": "regexp-flags-re.U-Unicode", "contents": "${1:re.U}" },
      { "trigger": "regexp-flags-re.X-灵活的格式", "contents": "${1:re.X}" },

      { "trigger": "regexp-group-获取结果", "contents": "${1:regResult}.group(${2:1,2})" },
      { "trigger": "regexp-match-正则开始匹配", "contents": "${1:regResult}=re.match(${2:pattern}, ${3:string}, ${4:flags=0})" },
      { "trigger": "regexp-search-正则全文匹配", "contents": "${1:regResult}=re.search(${2:pattern}, ${3:string}, ${4:flags=0})" },
      { "trigger": "regexp-sub-正则替换", "contents": "${1:regResult}=re.sub(${2:pattern}, ${3:new-str|function}, ${4:old}${5:[,count=0, flags=0]})" },

      { "trigger": "regexp-groups-获取所有结果", "contents": "${1:regResult}.groups()" },

      /*时间*/
      { "trigger": "time.format\t时间格式化", "contents": "${1:timeName}=time.strftime(\"%Y-%m-%d %H:%M:%S\", time.localtime())" },
      /*读入一行*/
      { "trigger": "raw_input\t读入一行", "contents": "${1:str} = raw_input(\"${2:请输入：}\");" },
      { "trigger": "input\t读入一行", "contents": "${1:str} = input(\"${2:请输入：}\");" },

      
 

      /**关键字*/
      { "trigger": "and", "contents": "and" },
      { "trigger": "exec", "contents": "exec" },
      { "trigger": "not", "contents": "not" },
      { "trigger": "assert", "contents": "assert" },
      { "trigger": "finally", "contents": "finally" },
      { "trigger": "or", "contents": "or" },
      { "trigger": "break", "contents": "break" },
      { "trigger": "for", "contents": "for" },
      { "trigger": "pass", "contents": "pass" },
      { "trigger": "class", "contents": "class" },
      { "trigger": "from", "contents": "from ${1:modname} import ${2:name1[, name2[, ... nameN]]}" },
      { "trigger": "print", "contents": "print" },
      { "trigger": "continue", "contents": "continue" },
      { "trigger": "global\t全局方法", "contents": "global()" },
      { "trigger": "raise", "contents": "raise" },
      { "trigger": "def", "contents": "def" },
      { "trigger": "if", "contents": "if" },
      { "trigger": "return", "contents": "return" },
      { "trigger": "del", "contents": "del" },
      { "trigger": "import", "contents": "import" },
      { "trigger": "try", "contents": "try" },
      { "trigger": "elif", "contents": "elif" },
      { "trigger": "in", "contents": "in" },
      { "trigger": "while", "contents": "while" },
      { "trigger": "else", "contents": "else" },
      { "trigger": "is", "contents": "is" },
      { "trigger": "with", "contents": "with" },
      { "trigger": "except", "contents": "except" },
      { "trigger": "lambda", "contents": "lambda" },
      { "trigger": "yield", "contents": "yield" },
   ]
}
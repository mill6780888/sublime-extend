{
   "scope": "source.py",

   "completions":
   [
      { "trigger": "file-head", "contents": "#!/usr/bin/python\n# -*- coding: UTF-8 -*-\n" },
      { "trigger": "comment-more", "contents": "\"\"\"\n  ${1:这里是多行文本描述}\n\"\"\"\n" },
      { "trigger": "ifelse", "contents": "if ${1:expression} : \n   ${3:TODO} \nelif ${2:expression} :  \n   ${4:TODO}  \nelse :  \n   ${5:TODO} " },

      { "trigger": "while", "contents": "while (${1:true}):\n   ${2://TODO }" },
   
      /*数据类型转换*/
      { "trigger": "convert-int", "contents": "${1:var}=int(${2:x} ${3:[,base]})#   将x转换为一个整数" },
      { "trigger": "convert-long", "contents": "${1:var}=long(${2:x} ${3:[,base]} )#   将x转换为一个长整数" },
      { "trigger": "convert-float", "contents": "${1:var}=float(${2:x})#   将x转换到一个浮点数" },
      { "trigger": "convert-complex", "contents": "${1:var}=complex(${2:real} ${3:[,imag]})# 创建一个复数" },
      { "trigger": "convert-str", "contents": "${1:var}=str(${2:x})# 将对象 x 转换为字符串" },
      { "trigger": "convert-repr表达式", "contents": "${1:var}=repr(${2:x})#  将对象 x 转换为表达式字符串" },
      { "trigger": "convert-eval", "contents": "${1:var}=eval(${2:str})#   用来计算在字符串中的有效Python表达式,并返回一个对象" },
      { "trigger": "convert-tuple", "contents": "${1:var}=tuple(${2:s})#   将序列 s 转换为一个元组" },
      { "trigger": "convert-list", "contents": "${1:var}=list(${2:s})#  将序列 s 转换为一个列表" },
      { "trigger": "convert-set", "contents": "${1:var}=set(${2:s})# 转换为可变集合" },
      { "trigger": "convert-dict字典", "contents": "${1:var}=dict(${2:d})#  创建一个字典。d 必须是一个序列 (${2:key},${3:value})元组。" },
      { "trigger": "convert-frozenset不可变集合", "contents": "${1:var}=frozenset(${2:s})# 转换为不可变集合" },
      { "trigger": "convert-chr字符", "contents": "${1:var}=chr(${2:x})# 将一个整数转换为一个字符" },
      { "trigger": "convert-unichr-Unicode字符", "contents": "${1:var}=unichr(${2:x})# 将一个整数转换为Unicode字符" },
      { "trigger": "convert-ord整数", "contents": "${1:var}=ord(${2:x})# 将一个字符转换为它的整数值" },
      { "trigger": "convert-hex十六进制字符串", "contents": "${1:var}=hex(${2:x})# 将一个整数转换为一个十六进制字符串" },
      { "trigger": "convert-oct八进制字符串", "contents": "${1:var}=oct(${2:x})# 将一个整数转换为一个八进制字符串" },
      /**函数*/
      { "trigger": "function-call", "contents": "${1:var=}printme(${2:str = \"My string\"});" },


      /**声明一个let的多变量*/
      { "trigger": "del", "contents": "del ${1:要删除的变量名}" },
      { "trigger": "substring", "contents": "${2:${1:b} = }${3:被截取的字符串}[${4:开始位置}:${5:结束位置}]" },
      { "trigger": "let-more", "contents": "${1:变量一}, ${3:变量二}, ${5:变量三} = ${2:值一}, ${4:值二}, ${6:值三}" },
      { "trigger": "list", "contents": "${1:listname} = [${2:元素1},${3:元素2}]" },
      { "trigger": "yuanzu", "contents": "${1:tuplename} = (${2:元素1},${3:元素2})" },

      /*类属性方法*/
      { "trigger": "class-getattr-访问对象的属性。", "contents": "getattr(${1:obj, name[, default]}) " },
      { "trigger": "class-hasattr-检查是否存在一个属性。", "contents": "hasattr(${1:obj,name}) " },
      { "trigger": "class-setattr-设置一个属性。如果属性不存在，会创建一个新属性。", "contents": "setattr(${1:obj,name,value}) " },
      { "trigger": "class-delattr-删除属性。", "contents": "delattr(${1:obj, name}) " },
      { "trigger": "class-dict- 类的属性", "contents": "${1:className}.__dict__ " },
      { "trigger": "class-doc-类的文档字符串", "contents": "${1:className}.__doc__ " },
      { "trigger": "class-name-类名", "contents": "${1:className}.__name__" },
      { "trigger": "class-module-所在的模块", "contents": "${1:className}.__module__" },
      { "trigger": "class-bases-类的所有父类构成元素", "contents": "${1:className}.__bases__ " },
      { "trigger": "class-issubclass-是否子类", "contents": "issubclass(${1:sub},${2:sup})" },
      { "trigger": "class-isinstance-是否实例", "contents": "isinstance(${1:obj},${2:Class})" },
      { "trigger": "class-访问私有属性", "contents": "object._${1:className}__${2:attrName}" },


      { "trigger": "regexp-flags-re.I-大小写不敏感", "contents": "${1:re.I}" },
      { "trigger": "regexp-flags-re.L-本地化识别", "contents": "${1:re.L}" },
      { "trigger": "regexp-flags-re.M-多行匹配", "contents": "${1:re.M}" },
      { "trigger": "regexp-flags-re.S-.包括换行", "contents": "${1:re.S}" },
      { "trigger": "regexp-flags-re.U-Unicode", "contents": "${1:re.U}" },
      { "trigger": "regexp-flags-re.X-灵活的格式", "contents": "${1:re.X}" },

      { "trigger": "regexp-group-获取结果", "contents": "${1:regResult}.group(${2:1,2})" },
      { "trigger": "regexp-match-正则开始匹配", "contents": "${1:regResult}=re.match(${2:pattern}, ${3:string}, ${4:flags=0})" },
      { "trigger": "regexp-search-正则全文匹配", "contents": "${1:regResult}=re.search(${2:pattern}, ${3:string}, ${4:flags=0})" },
      { "trigger": "regexp-sub-正则替换", "contents": "${1:regResult}=re.sub(${2:pattern}, ${3:new-str|function}, ${4:old}${5:[,count=0, flags=0]})" },

      { "trigger": "regexp-groups-获取所有结果", "contents": "${1:regResult}.groups()" },

      /*sublime-api*/
      { "trigger": "sublime-sublime-message-设置状态栏消息", "contents": "sublime.status_message(\"${1:content}\")" },
      { "trigger": "sublime-sublime-error_message-错误消息", "contents": "sublime.error_message(\"${1:content}\")" },
      { "trigger": "sublime-sublime-message_dialog-对话框", "contents": "sublime.message_dialog(\"${1:content}\")" },
      { "trigger": "sublime-sublime-set_timeout-异步", "contents": "sublime.set_timeout(${1:callbacl},${2:5000})" },
      { "trigger": "sublime-sublime-ok_cancel_dialog-确认框", "contents": "${3:result}=sublime.ok_cancel_dialog(\"${1:content}\", \"yes\")" },

      /**关键字*/
      { "trigger": "and", "contents": "and" },
      { "trigger": "exec", "contents": "exec" },
      { "trigger": "not", "contents": "not" },
      { "trigger": "assert", "contents": "assert" },
      { "trigger": "finally", "contents": "finally" },
      { "trigger": "or", "contents": "or" },
      { "trigger": "break", "contents": "break" },
      { "trigger": "for", "contents": "for" },
      { "trigger": "pass", "contents": "pass" },
      { "trigger": "class", "contents": "class" },
      { "trigger": "from", "contents": "from ${1:modname} import ${2:name1[, name2[, ... nameN]]}" },
      { "trigger": "print", "contents": "print" },
      { "trigger": "continue", "contents": "continue" },
      { "trigger": "global全局方法", "contents": "global()" },
      { "trigger": "raise", "contents": "raise" },
      { "trigger": "def", "contents": "def" },
      { "trigger": "if", "contents": "if" },
      { "trigger": "return", "contents": "return" },
      { "trigger": "del", "contents": "del" },
      { "trigger": "import", "contents": "import" },
      { "trigger": "try", "contents": "try" },
      { "trigger": "elif", "contents": "elif" },
      { "trigger": "in", "contents": "in" },
      { "trigger": "while", "contents": "while" },
      { "trigger": "else", "contents": "else" },
      { "trigger": "is", "contents": "is" },
      { "trigger": "with", "contents": "with" },
      { "trigger": "except", "contents": "except" },
      { "trigger": "lambda", "contents": "lambda" },
      { "trigger": "yield", "contents": "yield" },
   ]
}